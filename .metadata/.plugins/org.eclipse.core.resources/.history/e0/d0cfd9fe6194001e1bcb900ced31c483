/*
 * movment.c
 *
 */
#include "movement.h"
#include "open_interface.h"
#include "Timer.h"
#include "lcd.h"
#include "helpers.h"
#include "uart.h"
#include "math.h"

// starting position of Cybot
int x = 61;
int y = 61;
int angle = 90;

char xLocation[10];
char yLocation[10];

int bumped(oi_t *sensor) {
    if (sensor->bumpLeft || sensor->bumpRight) return 1;
    return 0;
}

void avoid_obstacle(oi_t *sensor) {
    int left_bump = sensor->bumpLeft;
    int backtrack = 100;
    if (left_bump) {
        uart_sendStr("Left bump sensor has been hit.");
    } else {
        uart_sendStr("Right bump sensor has been hit.");
    }
    move_backward(sensor, backtrack);
}

/**
 *  0 == no edge,
 *  -1 == left edge,
 *  1 == right edge
 */
short boundDetect(oi_t *oi){
    short result = 0;

    if ((oi->cliffLeftSignal >= 2700) || (oi->cliffFrontLeftSignal >= 2700)) {
        result = -1;
    }
    else if ((oi->cliffRightSignal >= 2700)|| (oi->cliffFrontRightSignal >= 2700)) {
        result = 1;
    }

    return result;
}

void boundAvoid(oi_t *oi){
    short bound = boundDetect(oi);

    if (bound == 1){
        uart_sendStr("Right side hit boundary.");
        move_backward(oi, 100);

    } else if (bound == -1){
        uart_sendStr("Left side hit boundary..");
        move_backward(oi, 100);
    }
}

/**
 *  0 == no edge,
 *  -1 == left edge,
 *  1 == right edge
 */
short holeDetect(oi_t *oi){
    short result = 0;

    if ((oi->cliffLeftSignal <= 1000) || (oi->cliffFrontLeftSignal <= 1000)) {
        result = -1;
    }
    else if ((oi->cliffRightSignal <= 1000)|| (oi->cliffFrontRightSignal <= 1000)) {
        result = 1;
    }

    return result;
}

void holeAvoid(oi_t *oi){
    short hole = holeDetect(oi);

    if (hole == 1){
        uart_sendStr("Right cliff sensor has found a hole. ");
        move_backward(oi, 100);
    } else if (hole == -1){
        uart_sendStr("Left cliff sensor has found a hole.");
        move_backward(oi, 100);
    }
}
/**
 *  0 == no edge,
 *  -1 == left edge,
 *  1 == right edge
 */
short shinyDetect(oi_t *oi){
    short result = 0;

    if ((oi->cliffLeftSignal >= 2800) || (oi->cliffFrontLeftSignal >= 2800) || (oi->cliffRightSignal >= 2800)|| (oi->cliffFrontRightSignal >= 2800)) {
        result = 1;
    }

    return result;
}

void move_backward(oi_t *sensor, int milimeters) {
    if (milimeters < 0) return;
    oi_init(sensor);
    double sum = 0;
    int backward_speed = -50;
    oi_setWheels(backward_speed, backward_speed);
    while ((-1 * sum) < milimeters) {
        oi_update(sensor);
        sum += sensor->distance;
    }
    oi_setWheels(0, 0);
    calcNewXY(sum);
}

void move_forward(oi_t *sensor, int milimeters) {
    if (milimeters < 0) return;
    oi_init(sensor);
    char hitSomething = 0;
    double sum = 0;
    int forward_speed = 100;
    oi_setWheels(forward_speed, forward_speed);
    while (sum < milimeters) {
        oi_update(sensor);
        if (bumped(sensor)) {
            hitSomething = 1;
            oi_setWheels(0, 0);
            avoid_obstacle(sensor);
            break;
        }
        else if (shinyDetect(sensor)) {
            hitSomething = 2;
            oi_setWheels(0,0);
            uart_sendStr("Reached Destination!");
            victory_screech();
            break;
        }
        else if (boundDetect(sensor)) {
            hitSomething = 1;
            boundAvoid(sensor);
            break;
        }
        else if (holeDetect(sensor)) {
            hitSomething = 1;
            holeAvoid(sensor);
            break;
        }

        sum += sensor->distance;
    }
    oi_setWheels(0, 0);
    calcNewXY(sum);
    trackDistance(sum);
    if (hitSomething == 0) {
        uart_sendStr("Didn't hit any objects");
    }
}

void turn_clockwise(oi_t *sensor, int degrees){
    angle-=degrees;
    if (degrees < 0) return;
    oi_init(sensor);
    double turned = 0;
    oi_setWheels(-40, 40);

    while(degrees-4 > (-1 * turned)){
        oi_update(sensor);
        turned += sensor->angle;
    }
    oi_setWheels(0, 0);

    trackAngles((degrees*(-1.0)));
}

void turn_counter_clockwise(oi_t *sensor, int degrees){
    angle+=degrees;
    if (degrees < 0) return;
    oi_init(sensor);
    double turned = 0;
    oi_setWheels(40, -40);

    while(turned < degrees-4){
        oi_update(sensor);
        turned += sensor->angle;
    }
    oi_setWheels(0, 0);
    trackAngles((degrees*(1.0)));
}


void calcNewXY(int distance){
    x += distance/10*cos(angle*M_PI/180);
    y += distance/10*sin(angle*M_PI/180);
    sprintf(xLocation,"X: %d",x);
    sprintf(yLocation,"Y: %d",y);
}

void victory_screech() {
    unsigned char song[14] = {69,76,74,76,69,77,76,77,76,74,77,76,77,69};
    unsigned char duration[14] = {16,8,8,32,112,8,8,16,16,112,8,8,32,32};
    oi_loadSong(0, 14, song, duration);
    oi_play_song(0);
}

void followDirections(oi_t *oi, directions dirs[], int numDirs) {
    lcd_printf("numDirs: %d", numDirs);
    int i;
    turn_counter_clockwise(oi,180);
    for (i = 0; i < numDirs; i++) {
        if (dirs[i].angle == 0 && dirs[i].distance > 0) {
            move_forward(oi, dirs[i].distance);
        } else {
            if (dirs[i].angle < 0) {
                turn_clockwise(oi, dirs[i].angle * -1);
            } else {
                turn_counter_clockwise(oi, dirs[i].angle);
            }
        }
    }
    uart_sendStr("Mission Complete!");
    unsigned char song[14] = {69,76,74,76,69,77,76,77,76,74,77,76,77,69};
    unsigned char duration[14] = {16,8,8,32,112,8,8,16,16,112,8,8,32,32};
    oi_loadSong(0, 14, song, duration);
    oi_play_song(0);
}
