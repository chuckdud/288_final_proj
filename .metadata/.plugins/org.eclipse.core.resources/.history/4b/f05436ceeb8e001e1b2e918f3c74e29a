#include "helpers.h"
#include <stdbool.h>
#include "uart.h"
#include <math.h>
#include "servo.h"
#include "adc.h"
#include "ping.h"
#include "movement.h"
#define _OPEN_SYS_ITOA_EXT


double r =0;
double c= 0;
short numDirs = 0;


void findRC(oi_t *sensor){
    servo_move(90);
    int x = 0;
    double ir1;
    double ir2;
    double ping1;
    double ping2;
        while (x < 16)
        {
            adc_read();
            x++;
        }
        ir1 = adc_read();

        ping1 = ping_read();
        move_backward(sensor, 300);
        x = 0;
        adc_init();
        while (x < 16)
        {
            adc_read();
            x++;
        }
            ir2 = adc_read();

            ping2 = ping_read();

        r = irFindR(ping1, ping2, ir1, ir2);
        c = irFindC(r, ping1, ir1);
        lcd_printf("C = %.10lf\nR = %.10lf", c, r);


    }


void reverse(char str[], int length)
{
    int start = 0;
    int end = length - 1;
    while (start < end)
    {
        char temp = str[start];
        str[start] = str[end];
        str[end] = temp;
        end--;
        start++;
    }
}
char* itoa(int num, char *str, int base)
{
    int i = 0;
    bool isNegative = false;

    /* Handle 0 explicitly, otherwise empty string is
     * printed for 0 */
    if (num == 0)
    {
        str[i++] = '0';
        str[i] = '\0';
        return str;
    }

    // In standard itoa(), negative numbers are handled
    // only with base 10. Otherwise numbers are
    // considered unsigned.
    if (num < 0 && base == 10)
    {
        isNegative = true;
        num = -num;
    }

    // Process individual digits
    while (num != 0)
    {
        int rem = num % base;
        str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
        num = num / base;
    }

    // If number is negative, append '-'
    if (isNegative)
        str[i++] = '-';

    str[i] = '\0'; // Append string terminator

    // Reverse the string
    reverse(str, i);

    return str;
}


char getSocket(){
    int index = 0;  // Set index to the beginning of the command buffer
        char my_data = uart_receive(); // Get first byte of the command from the Client
        //char command[3];
        // Get the rest of the command until a newline byte (i.e., '\n') received
//        while(my_data != ('\n' || '\x17') )
//        {
//          command[index] = my_data;  // Place byte into the command buffer
//          index++;
//          my_data = uart_receive(); // Get the next byte of the command
//        }

        //command[index] = '\n';  // place newline into command in case one wants to echo the full command back to the Client
        //command[index] = 0;   // End command C-string with a NULL byte so that functions like printf know when to stop printing

        //lcd_printf("Got: %s", command);  // Print received command to the LCD screen

        // Send a response to the Client (Starter Client expects the response to end with \n)
        // In this case I am just sending back the first byte of the command received and a '\n'
        //uart_sendStr("Command Received\n");
       // uart_sendChar('\n');
        // Only send a '\n' if the first byte of the command is not a '\n',
        // to avoid sending back-to-back '\n' to the client
       return my_data;
}

void scan180(float vals[],float IRvals[]){
    ping_init();
     int angle = 0;
     int i = 0;
       for(angle = 0; angle <= 180; angle += 2){
           servo_move(angle);
           vals[i] = ping_read();
           IRvals[i] = convertRawIR(adc_read(),r,c);
           i++;

       }
}

int scnrAnalysis(float vals[], object *results, float IRvals[])
{

    int numResult = 0;
    int numAdded = 0;
    int i = 0;
    int angleCount = 0;
    int startAngle = 0;
    int onObj = 0;
    int adjPnts = 0;

    for (i = 0; i < 89; i++)
    {

        double slope = (IRvals[i + 1] - IRvals[i]) / 2.0;

        if ((IRvals[i + 1] > 75) && onObj == 0) //If something is not close and not on object
        {
            adjPnts = 0;
        }
        else if (((IRvals[i + 1] < 60) && (onObj == 0) && slope <= -5)
                || ((abs(slope) < 10) && (adjPnts > 0) && (onObj == 0))) //finding object conditional

        {
            if (adjPnts < 2)  // Make sure that it's not noise
            {
                adjPnts++;
            }
            else if (adjPnts >= 2) // If dist is close for multiple == new object
            {
                numResult++;
                startAngle = (i - 1) * 2;
                angleCount = 2;
                onObj = 1;
                adjPnts = 0;

            }
        }
        else if ((slope >= 5) && (onObj == 1) && (IRvals[i + 1] > 65)) //End of object
        {
            if (numResult <= 1)
            {
                angleCount++;
                results->angle = startAngle;
                results->width = 2 * angleCount;
                float temp;
                //cyBOT_Scan((startAngle + angleCount), &temp);
                results->distance = vals[(startAngle + angleCount) / 2];
                //Store all data and reset vars

                results->linWidth = abs(
                        sin(results->distance / 2) * results->distance);
                numAdded++;
                onObj = 0;
                angleCount = 0;
                adjPnts = 0;

            }
            else
            {
                results++;
                angleCount++;
                angleCount++;
                results->angle = startAngle;
                results->width = 2 * angleCount;
                float temp;
                //cyBOT_Scan((startAngle + angleCount), &temp);
                results->distance = vals[(startAngle + angleCount) / 2];
                //Store all data and reset vars

                results->linWidth = abs(
                        sin(results->distance / 2) * results->distance);
                numAdded++;
                onObj = 0;
                angleCount = 0;
                adjPnts = 0;
            }
        }
        else if ((onObj == 1)) //continue counting angles
        {
            angleCount++;

        }

        else
        {
            continue;
        }
    }
    if ((numAdded < numResult) && (onObj == 1))
    { //If data ended while on obj store obj da
        results++;
        angleCount++;
        results->angle = startAngle;
        results->width = 2 * angleCount;
        float temp;
        //cyBOT_Scan((startAngle + angleCount), &temp);
        results->distance = vals[(startAngle + angleCount) / 2];

        results->linWidth = abs(sin(results->distance / 2) * results->distance);
        numAdded++;
        onObj = 0;
        angleCount = 0;
        adjPnts = 0;
    }
    else
    {

    }
    return numResult;
}

void trackAngles(directions *dirs, float angle){



}
